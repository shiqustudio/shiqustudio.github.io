<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>计算机组成与体系结构 - 标签 - 我的 Hugo FixIt 网站</title>
    <link>http://localhost:1313/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</link>
    <description>计算机组成与体系结构 - 标签 - 我的 Hugo FixIt 网站</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 09 Oct 2018 16:21:04 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/" rel="self" type="application/rss+xml" /><item>
  <title>流水线</title>
  <link>http://localhost:1313/liushuixian/</link>
  <pubDate>Tue, 09 Oct 2018 16:21:04 &#43;0000</pubDate>
  <author>xucong</author>
  <guid>http://localhost:1313/liushuixian/</guid>
  <description><![CDATA[<h2 id="概念">概念</h2>
<p>流水线是指在程序执行时多条指令重叠进行操作的一种准并行处理实现技术。各种部件同时处理是针对不同指令而言的，它们可同时为多条指令的不同部分进行工作，以提高各部件的利用率和指令的平均执行速度。</p>
<table>
<thead>
<tr>
<th style="text-align:center">未使用流水线</th>
<th style="text-align:center">使用流水线</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>流水线周期为执行时间最长的一段。</p>
<h2 id="流水线计算公式">流水线计算公式</h2>
<p></p>
<p>首先使用理论公式，没有答案用实践公式。</p>
<h2 id="流水线吞吐率计算">流水线吞吐率计算</h2>
<p>流水线吞吐率是指单位时间内处理的任务的数量。</p>
<table>
<thead>
<tr>
<th style="text-align:center">基本公式</th>
<th style="text-align:center">最大吞吐率</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h2 id="流水线加速比">流水线加速比</h2>
<p>完成一批任务，不使用流水线所用的时间与使用流水线所用的时间之比称为流水线的加速比。</p>
<p>公式： S=不使用流水线执行时间/使用流水线执行时间</p>
<p>流水线加速比越高越好，说明使用流水线的效果。</p>
<h2 id="流水线的效率">流水线的效率</h2>
<p></p>
<h2 id="例题">例题</h2>
<p></p>
<h2 id="其他">其他</h2>
<h3 id="主机">主机</h3>
<p></p>
<h3 id="cisc-和-risc">CISC 和 RISC</h3>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">指令</th>
<th style="text-align:center">寻址方式</th>
<th style="text-align:center">实现方式</th>
<th style="text-align:center">其他</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CISC（复杂指令集）</td>
<td style="text-align:center">数量多，使用频率差别大，可变长格式</td>
<td style="text-align:center">支持多种</td>
<td style="text-align:center">微程序控制技术（微码）</td>
<td style="text-align:center">研制周期长</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">RISC（精简指令集）</td>
<td style="text-align:center">数量少，使用频率接近，定长格式，大部分为单周期指令，操作寄存器，只有 Load/Store 操作内存</td>
<td style="text-align:center">支持方式少</td>
<td style="text-align:center">增加了通用寄存器；硬布线逻辑控制为主；适合采用流水线</td>
<td style="text-align:center">优化编码，有效支持高级语言</td>
</tr>
</tbody>
</table>
]]></description>
</item>
<item>
  <title>计算机数据</title>
  <link>http://localhost:1313/data/</link>
  <pubDate>Mon, 08 Oct 2018 23:01:10 &#43;0000</pubDate>
  <author>xucong</author>
  <guid>http://localhost:1313/data/</guid>
  <description><![CDATA[<h3 id="数据的表示">数据的表示</h3>
<p><strong>数据的表示可分为：原码，反码和补码。（二进制）</strong></p>
<ul>
<li>原码： 符号位 0 为正，1 为负。</li>
<li>反码： 符号位 0 为正，1 为负。
<ul>
<li>正数： 反码同原码。</li>
<li>负数： 符号位除外其他位按位取反。</li>
</ul>
</li>
<li>补码：
<ul>
<li>正数： 同原码。</li>
<li>负数： 符号位除外其他位按位取反再+1。</li>
</ul>
</li>
<li>移码： 补码符号位取反。</li>
</ul>
<h3 id="数据表示范围">数据表示范围</h3>
<ul>
<li>原码： <code>-(z^n-1 - 1) ~ 2^n-1 - 1</code></li>
<li>反码： <code>-(z^n-1 - 1) ~ 2^n-1 - 1</code></li>
<li>补码： <code>-z^n-1 ~ 2^n-1 - 1</code> （补码正 0 和负 0 相同，少占一数位，就多一个范围）</li>
</ul>
<p>例：
8 位二进制，除去符号位还有 7 位，7 个 1 为最大数，相当于 8 个 1 减 1，也就是 2^7-1, 所以范围就算出来了。</p>
<h3 id="浮点数运算">浮点数运算</h3>
<p><strong>对阶（小阶对大阶）+ 尾数计算（科学计数法）+ 结果规格化（科学技术法）</strong></p>
]]></description>
</item>
</channel>
</rss>
